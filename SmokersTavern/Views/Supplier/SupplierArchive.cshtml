<!--Tryvynne -->
@model PagedList.IPagedList<SmokersTavern.Model.SupplierArchiveViewModel>
@using PagedList.Mvc;

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("~/Content/vendor/bootstrap/css/bootstrap.min.css")
@Styles.Render("~/Content/vendor/font-awesome/css/font-awesome.min.css")
@Styles.Render("~/Content/css/sb-admin.css")

@Scripts.Render("~/Content/vendor/jquery/jquery.min.js")
@Scripts.Render("~/Content/vendor/bootstrap/js/bootstrap.bundle.min.js")
@Scripts.Render("~/Content/js/sb-admin.min.js")
@Scripts.Render("~/Content/vendor/jquery-easing/jquery.easing.min.js")
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />


<script>
    function myFunction() {
        var input, filter, table, tr, td, i;
        input = document.getElementById("searchBox");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[0];
            if (td) {
                if (td.innerHTML.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>

<center><h2 class="alert-danger" style="font-family:'Comic Sans MS';">Registered Suppliers</h2></center>
<br />
@using (Html.BeginForm("SupplierArchive", "Supplier", FormMethod.Get))
{
    <p>
        Search By Supplier Name: @Html.TextBox("searchString", ViewBag.CurrentFilter as string, new { id = "searchBox", onkeyup = "myFunction()" })
        <input type="submit" value="Search" />
    </p>
}
<br />
<div class="row">
    <div class="box">
        <div class="col-lg-12">
            <table class="table" id="myTable">
                <tr>
                    <th class="m">
                        @Html.DisplayNameFor(model => model.First().name)
                    </th>
                    <th class="m">
                        @Html.DisplayNameFor(model => model.First().physicalAddress)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().emailAddress)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().phoneNo)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().ProductName)
                    </th>
                </tr>

                @foreach (var item in Model)
                {
                    <tr>
                        <td class="m">
                            @Html.DisplayFor(modelItem => item.name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.physicalAddress)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.emailAddress)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.phoneNo)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Product.ProductName)
                        </td>
                        <td>
                            @Html.ActionLink("Restore", "RestoreSupplier", new { Id = item.Id }, new { @class = "btn btn-primary", @style = "color:white" })
                        </td>
                    </tr>
                }

            </table>
        </div>
    </div>
</div>
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("SupplierArchive",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))